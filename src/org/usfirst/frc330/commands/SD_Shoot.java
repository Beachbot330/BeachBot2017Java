// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.commands;
import edu.wpi.first.wpilibj.command.BBCommand;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc330.Robot;
import org.usfirst.frc330.constants.ShooterConst;
import org.usfirst.frc330.util.TalonPIDSettings;

/**
 *
 */
public class SD_Shoot extends BBCommand {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public SD_Shoot() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooter);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
        SmartDashboard.putNumber("ShooterP", ShooterConst.DEFAULT.getP());
        SmartDashboard.putNumber("ShooterI", ShooterConst.DEFAULT.getI());
        SmartDashboard.putNumber("ShooterD", ShooterConst.DEFAULT.getD());
        SmartDashboard.putNumber("ShooterF", ShooterConst.DEFAULT.getF());
        SmartDashboard.putNumber("ShooterRampRate", ShooterConst.DEFAULT.getRampRate());
        SmartDashboard.putNumber("ShooterTargetRPM", ShooterConst.DEFAULT.getTargetRPM());
        SmartDashboard.putNumber("ShooterTolerance", ShooterConst.DEFAULT.getTolerance());
        SmartDashboard.putNumber("ShooterHoodLocation", ShooterConst.DEFAULT.getHoodLocation());
    }
    
    TalonPIDSettings settings;
	double p, i, d, f;
	double rampRate;
	double targetRPM;
	double tolerance;
	double hoodLocation;

    // Called just before this Command runs the first time
    protected void initialize() {
        p = SmartDashboard.getNumber("ShooterP", ShooterConst.DEFAULT.getP());
        i = SmartDashboard.getNumber("ShooterI", ShooterConst.DEFAULT.getI());
        d = SmartDashboard.getNumber("ShooterD", ShooterConst.DEFAULT.getD());
        f = SmartDashboard.getNumber("ShooterF", ShooterConst.DEFAULT.getF());
        rampRate = SmartDashboard.getNumber("ShooterRampRate", ShooterConst.DEFAULT.getRampRate());
        targetRPM = SmartDashboard.getNumber("ShooterTargetRPM", ShooterConst.DEFAULT.getTargetRPM());
        tolerance = SmartDashboard.getNumber("ShooterTolerance", ShooterConst.DEFAULT.getTolerance());
        hoodLocation = SmartDashboard.getNumber("ShooterHoodLocation", ShooterConst.DEFAULT.getHoodLocation());
    	settings = new TalonPIDSettings(p,i,d,f,rampRate, targetRPM, tolerance, hoodLocation);
    	Robot.shooter.setShooterSettings(settings);
    	Robot.shooter.enableShooter();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	boolean settingsUpdated = false;
    	if (p != SmartDashboard.getNumber("ShooterP", ShooterConst.DEFAULT.getP())) {
    		p = SmartDashboard.getNumber("ShooterP", ShooterConst.DEFAULT.getP());
    		settingsUpdated = true;
    	}
        if (i != SmartDashboard.getNumber("ShooterI", ShooterConst.DEFAULT.getI())) {
        	i = SmartDashboard.getNumber("ShooterI", ShooterConst.DEFAULT.getI());
        	settingsUpdated = true;
        }
        if (d != SmartDashboard.getNumber("ShooterD", ShooterConst.DEFAULT.getD())) {
        	d = SmartDashboard.getNumber("ShooterD", ShooterConst.DEFAULT.getD());
        	settingsUpdated = true;
        }
        if (f != SmartDashboard.getNumber("ShooterF", ShooterConst.DEFAULT.getF())) {
        	f = SmartDashboard.getNumber("ShooterF", ShooterConst.DEFAULT.getF());
        	settingsUpdated = true;
        }
        if (rampRate != SmartDashboard.getNumber("ShooterRampRate", ShooterConst.DEFAULT.getRampRate())) {
        	rampRate = SmartDashboard.getNumber("ShooterRampRate", ShooterConst.DEFAULT.getRampRate());
        	settingsUpdated = true;
        }
        if (targetRPM != SmartDashboard.getNumber("ShooterTargetRPM", ShooterConst.DEFAULT.getTargetRPM())) {
        	targetRPM = SmartDashboard.getNumber("ShooterTargetRPM", ShooterConst.DEFAULT.getTargetRPM());
        	settingsUpdated = true;
        }
        if (tolerance != SmartDashboard.getNumber("ShooterTolerance", ShooterConst.DEFAULT.getTolerance())) {
        	tolerance = SmartDashboard.getNumber("ShooterTolerance", ShooterConst.DEFAULT.getTolerance());
        	settingsUpdated = true;
        }
        if (hoodLocation != SmartDashboard.getNumber("ShooterHoodLocation", ShooterConst.DEFAULT.getHoodLocation())) {
        	hoodLocation = SmartDashboard.getNumber("ShooterHoodLocation", ShooterConst.DEFAULT.getHoodLocation());
        	settingsUpdated = true;
        }
    	settings = new TalonPIDSettings(p,i,d,f,rampRate, targetRPM, tolerance, hoodLocation);
    	Robot.shooter.setShooterSettings(settings);
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.shooter.disableShooter();
    }

}
