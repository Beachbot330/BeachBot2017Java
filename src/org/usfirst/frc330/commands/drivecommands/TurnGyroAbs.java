// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc330.commands.drivecommands;

import org.usfirst.frc330.Robot;
import org.usfirst.frc330.constants.ChassisConst;
import org.usfirst.frc330.util.Logger;
import org.usfirst.frc330.util.Logger.Severity;
import org.usfirst.frc330.wpilibj.PIDGains;

import edu.wpi.first.wpilibj.command.BBCommand;

/**
 *
 */
public class  TurnGyroAbs extends BBCommand {
    double angle, tolerance, maxOutput, maxOutputStep, maxOutputMax;
    boolean stopAtEnd = false;
    boolean enable = true;
    PIDGains gains;
    
    public TurnGyroAbs(double angle, PIDGains gains) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        this(angle, 0, 15, false, gains);
    }
    
    public TurnGyroAbs(double angle, double tolerance, PIDGains gains)
    {
        this(angle, tolerance, 15, false, gains);
    
    }
    
    public TurnGyroAbs(double angle, double tolerance, double timeout, PIDGains gains)
    {
        this(angle, tolerance, timeout, false, gains);
    
    }
    
    public TurnGyroAbs(double angle, double tolerance, double timeout, boolean stopAtEnd, PIDGains gains) {
        this(angle, tolerance, timeout, stopAtEnd, true, gains);
    }
    
    public TurnGyroAbs(double angle, double tolerance, double timeout, boolean stopAtEnd, boolean enable, PIDGains gains) {
                // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.chassis);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        this.angle = angle;
        this.tolerance = tolerance;
        if (timeout >= 0.0)
        	setTimeout(timeout);
        this.stopAtEnd = stopAtEnd;
        this.enable = enable;
        this.gains = gains;
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        Robot.chassis.leftDrivePID.disable();
        Robot.chassis.rightDrivePID.disable();  
        
        Robot.chassis.gyroPID.setPID(gains);
 //       Robot.chassis.gyroPID.setMaxOutput(gains.getMaxOutput());
        Robot.chassis.gyroPID.setAbsoluteTolerance(tolerance);
        Robot.chassis.gyroPID.setSetpoint(angle);
        maxOutputMax = gains.getMaxOutput();
        maxOutputStep = gains.getMaxOutputStep();
        Logger.getInstance().println("TurnGyroAbs Setpoint: " + angle);
        Logger.getInstance().println("Max output: " + gains.getMaxOutput());
        if (enable) 
            Robot.chassis.gyroPID.enable();
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	maxOutput += maxOutputStep;
    	if (maxOutput >= maxOutputMax) 
    		maxOutput = maxOutputMax;
    	Robot.chassis.leftDrivePID.setMaxOutput(maxOutput);
        Robot.chassis.rightDrivePID.setMaxOutput(maxOutput);
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        if (Robot.chassis.gyroPID.onTarget() || isTimedOut())
        {
            return true;
        }
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
    	Severity severity = Severity.INFO;
        if (stopAtEnd)
        {
            Robot.chassis.stopDrive();
        }
        if (isTimedOut())
        	severity = Severity.WARNING;
        Logger.getInstance().println("TurnGyroAbs Final Angle: " + Robot.chassis.getAngle() + "  Setpoint: " + angle, severity);
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        stopAtEnd = true;
        end();
    }
}
