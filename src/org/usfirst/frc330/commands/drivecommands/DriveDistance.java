// RobotBuilder Version: 1.5BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.commands.drivecommands;	


import org.usfirst.frc330.Robot;
import org.usfirst.frc330.constants.ChassisConst;
import org.usfirst.frc330.util.Logger;
import org.usfirst.frc330.util.Logger.Severity;
import org.usfirst.frc330.wpilibj.PIDGains;

import edu.wpi.first.wpilibj.command.BBCommand;

/**
 *
 */
public class  DriveDistance extends BBCommand {

	double leftDistance, rightDistance, tolerance, maxOutput, maxOutputStep, maxOutputMax;
	double leftSetpoint, rightSetpoint;
	double origDistance;
    boolean stopAtEnd = false;
    PIDGains gains;
    
    public DriveDistance(double distance, PIDGains gains) {
        this(distance, 0, 15, false, gains);
    }
    
    public DriveDistance(double distance, double tolerance, PIDGains gains)
    {
        this(distance, tolerance, 15, false, gains);
    }
    
    
    public DriveDistance(	double distance, double tolerance,
    						double timeout, boolean stopAtEnd, PIDGains gains) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.chassis);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        this.leftDistance = distance;
        this.rightDistance = distance;
        this.tolerance = tolerance;
        if (timeout > 0.0)
        	setTimeout(timeout);
        this.stopAtEnd = stopAtEnd;
        origDistance = distance;
        this.gains = gains;
        maxOutput = 0;
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        Robot.chassis.gyroPID.disable();
        
        Robot.chassis.leftDrivePID.setPID(gains);
        Robot.chassis.rightDrivePID.setPID(gains);
        maxOutputMax = gains.getMaxOutput();
        maxOutputStep = gains.getMaxOutputStep();

        leftSetpoint = leftDistance+Robot.chassis.getLeftDistance();
        rightSetpoint = rightDistance+Robot.chassis.getRightDistance();
        Robot.chassis.leftDrivePID.setSetpoint(leftSetpoint);
        Robot.chassis.rightDrivePID.setSetpoint(rightSetpoint);
        Robot.chassis.leftDrivePID.setAbsoluteTolerance(tolerance);
        Robot.chassis.rightDrivePID.setAbsoluteTolerance(tolerance);  
        Robot.chassis.leftDrivePID.enable();
        Robot.chassis.rightDrivePID.enable();
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	maxOutput += maxOutputStep;
    	if (maxOutput >= maxOutputMax) 
    		maxOutput = maxOutputMax;
    	Robot.chassis.leftDrivePID.setMaxOutput(maxOutput);
        Robot.chassis.rightDrivePID.setMaxOutput(maxOutput);
   
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        if (Robot.chassis.leftDrivePID.onTarget() || Robot.chassis.rightDrivePID.onTarget() || isTimedOut())
        {
                return true;            
        }
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
    	Severity severity = Severity.INFO;
        if (stopAtEnd)
        {
            Robot.chassis.stopDrive();
        }
        if (isTimedOut())
        {
        	severity = Severity.WARNING;
        	Logger.getInstance().println("Timeout Debug:", severity);
        	Logger.getInstance().println("Left Side On Target: " + Robot.chassis.leftDrivePID.onTarget(),severity);
        	Logger.getInstance().println("Right Side On Target: " + Robot.chassis.rightDrivePID.onTarget(), severity);
        	Logger.getInstance().println("Tolerance we think we set: " + tolerance, severity);
        }
        Logger.getInstance().println("DriveDistance Left Setpoint: " + leftSetpoint + " Left: " + Robot.chassis.getLeftDistance() + " Right Setpoint: " + rightSetpoint + " Right: " + Robot.chassis.getRightDistance(), false, severity);
        this.leftDistance = origDistance;
        this.rightDistance = origDistance;
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        stopAtEnd = true;
        end();
    }

}
