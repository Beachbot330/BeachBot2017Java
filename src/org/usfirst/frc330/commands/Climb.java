// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.commands;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.BBCommand;
import org.usfirst.frc330.Robot;
import org.usfirst.frc330.constants.ShooterConst;
import org.usfirst.frc330.subsystems.Frills;
import org.usfirst.frc330.util.Logger;

/**
 *
 */
public class Climb extends BBCommand {
	
	boolean ratchetEngaged = false;
	boolean climbing = false;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Climb() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooter);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if(Robot.oi.operator.getRawButton(6)){
    		if(!ratchetEngaged){
    			Robot.shooter.climberLock();
    			ratchetEngaged=true;
    		}
    		if(!climbing){
    			Robot.shooter.setGateSettingsClimb(ShooterConst.CLIMB);
    			Robot.shooter.enableGateClimbMAX();
    			climbing = true;
    			Robot.chassis.setClimbing(true);
    			Robot.shooter.setClimbing(true);
    			Robot.frills.setClimbing(true);
    			Robot.pickup.setClimbing(true);
    			Robot.frills.setDecorativeStyleLED(Frills.Style.OTHER2);
    		}
    		Logger.getInstance().println("Climber Current " + Robot.shooter.getGateCurrent());
    	}
    	else{
    		if(climbing){
    			Robot.shooter.stopGate();
    			climbing = false;
    		}
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.shooter.stopGate();
    	ratchetEngaged = false;
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	this.end();
    }
}
