// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.commands;
import edu.wpi.first.wpilibj.command.BBCommand;
import org.usfirst.frc330.Robot;
import org.usfirst.frc330.constants.ShooterConst;

/**
 *
 */
public class GateFeed extends BBCommand {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public GateFeed() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooter);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    
    boolean gateState = false;

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.shooter.climberUnlock();
    	Robot.shooter.setGateSettings(ShooterConst.GATE);
    	if (!Robot.shooter.isShooterAtSpeed()) {
    		Robot.shooter.enableGateForward();
    		gateState = true;
    	}
    }
    
    protected void execute() {
    	if (Robot.shooter.isShooterAtSpeed() && gateState == false) {
    		Robot.shooter.enableGateForward();
    		gateState = true; 
    	}
    	else if (!Robot.shooter.isShooterAtSpeed() && gateState == true) {
    		Robot.shooter.disableGate();
    		gateState = false;
    	}
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.shooter.disableGate();
    	gateState = false;
    }

	@Override
	protected boolean isFinished() {
		return false;
	}

}
