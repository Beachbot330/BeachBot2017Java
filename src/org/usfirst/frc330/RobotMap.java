// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.kauailabs.navx.frc.AHRS;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.AnalogOutput;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DigitalOutput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.SPI.Port;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;
import org.usfirst.frc330.wpilibj.BBDoubleSolenoid;
import org.usfirst.frc330.wpilibj.BBDualServo;
import org.usfirst.frc330.wpilibj.BBServo;
import org.usfirst.frc330.wpilibj.BBSolenoid;
import org.usfirst.frc330.wpilibj.DualSpeedController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;


/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DigitalOutput frillsBuzzer;
    public static DigitalInput frillspracticeRobot;
    public static PowerDistributionPanel frillsPowerDistPanel;
    public static DigitalOutput frillsgreenLEDs;
    public static AnalogOutput frillsLEDSelection;
    public static AnalogOutput frillsDyingBlueSuns;
    public static DigitalOutput frillsGearLight;
    public static SpeedController chassisLeftDrive1;
    public static SpeedController chassisLeftDrive2;
    public static SpeedController chassisLeftDrive3;
    public static SpeedController chassisRightDrive1;
    public static SpeedController chassisRightDrive2;
    public static SpeedController chassisRightDrive3;
    public static Compressor chassisCompressor;
    public static Encoder chassisDriveTrainEncoderL;
    public static Encoder chassisDriveTrainEncoderR;
    public static BBDoubleSolenoid chassisShifter;
    public static AnalogInput chassisPressureSensor;
    public static AHRS chassisImu;
    public static BBSolenoid shooterClimberBrake;
    public static WPI_TalonSRX shooterShooter;
    public static WPI_TalonSRX shooterShooter2;
    public static WPI_TalonSRX shooterGate;
    public static WPI_TalonSRX shooterGate2;
    public static BBServo shooterHood1;
    public static BBServo shooterHood2;
    public static BBDualServo shooterHood;
    public static BBSolenoid pickupWings;
    public static SpeedController pickupPickup1;
    public static SpeedController pickupPickup2;
    public static DualSpeedController pickupPickup;
    public static BBSolenoid pickupLift;
    public static DigitalInput pickupGearSensor;
    public static SpeedController pickupHopper;
    public static BBDoubleSolenoid pickupPincher;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static AnalogOutput LEDselection;
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        frillsBuzzer = new DigitalOutput(9);
        LiveWindow.addActuator("Frills", "Buzzer", frillsBuzzer);
        
        frillspracticeRobot = new DigitalInput(0);
        LiveWindow.addSensor("Frills", "practiceRobot", frillspracticeRobot);
        
        frillsPowerDistPanel = new PowerDistributionPanel(11);
        LiveWindow.addSensor("Frills", "PowerDistPanel", frillsPowerDistPanel);
        
        frillsgreenLEDs = new DigitalOutput(8);
        LiveWindow.addActuator("Frills", "greenLEDs", frillsgreenLEDs);
        
        frillsLEDSelection = new AnalogOutput(0);
        LiveWindow.addActuator("Frills", "LEDSelection", frillsLEDSelection);
        
        frillsDyingBlueSuns = new AnalogOutput(1);
        LiveWindow.addActuator("Frills", "DyingBlueSuns", frillsDyingBlueSuns);
        
        frillsGearLight = new DigitalOutput(6);
        LiveWindow.addActuator("Frills", "GearLight", frillsGearLight);
        
        chassisLeftDrive1 = new Spark(0);
        LiveWindow.addActuator("Chassis", "LeftDrive1", (Spark) chassisLeftDrive1);
        
        chassisLeftDrive2 = new Spark(1);
        LiveWindow.addActuator("Chassis", "LeftDrive2", (Spark) chassisLeftDrive2);
        
        chassisLeftDrive3 = new Spark(2);
        LiveWindow.addActuator("Chassis", "LeftDrive3", (Spark) chassisLeftDrive3);
        
        chassisRightDrive1 = new Spark(10);
        LiveWindow.addActuator("Chassis", "RightDrive1", (Spark) chassisRightDrive1);
        
        chassisRightDrive2 = new Spark(4);
        LiveWindow.addActuator("Chassis", "RightDrive2", (Spark) chassisRightDrive2);
        
        chassisRightDrive3 = new Spark(5);
        LiveWindow.addActuator("Chassis", "RightDrive3", (Spark) chassisRightDrive3);
        
        chassisCompressor = new Compressor(0);
        
        
        chassisDriveTrainEncoderL = new Encoder(1, 2, false, EncodingType.k4X);
        LiveWindow.addSensor("Chassis", "DriveTrainEncoderL", chassisDriveTrainEncoderL);
        chassisDriveTrainEncoderL.setDistancePerPulse(1.0);
        chassisDriveTrainEncoderL.setPIDSourceType(PIDSourceType.kDisplacement);
        chassisDriveTrainEncoderR = new Encoder(3, 4, false, EncodingType.k4X);
        LiveWindow.addSensor("Chassis", "DriveTrainEncoderR", chassisDriveTrainEncoderR);
        chassisDriveTrainEncoderR.setDistancePerPulse(1.0);
        chassisDriveTrainEncoderR.setPIDSourceType(PIDSourceType.kDisplacement);
        chassisShifter = new BBDoubleSolenoid(0, 3, 4);
        LiveWindow.addActuator("Chassis", "Shifter", chassisShifter);
        
        chassisPressureSensor = new AnalogInput(0);
        LiveWindow.addSensor("Chassis", "PressureSensor", chassisPressureSensor);
        
        chassisImu = new AHRS(Port.kMXP, (byte)100);
        LiveWindow.addSensor("Chassis", "Imu", chassisImu);
        
        shooterClimberBrake = new BBSolenoid(0, 2);
        LiveWindow.addActuator("Shooter", "ClimberBrake", shooterClimberBrake);
        
        shooterShooter = new WPI_TalonSRX(2);
        LiveWindow.addActuator("Shooter", "Shooter", shooterShooter);
        
        shooterShooter2 = new WPI_TalonSRX(3);
        LiveWindow.addActuator("Shooter", "Shooter2", shooterShooter2);
        
        shooterGate = new WPI_TalonSRX(4);
        LiveWindow.addActuator("Shooter", "Gate", shooterGate);
        
        shooterGate2 = new WPI_TalonSRX(5);
        LiveWindow.addActuator("Shooter", "Gate2", shooterGate2);
        
        shooterHood1 = new BBServo(8, false);
        LiveWindow.addActuator("Shooter", "Hood1", shooterHood1);
        
        shooterHood2 = new BBServo(9, false);
        LiveWindow.addActuator("Shooter", "Hood2", shooterHood2);
        
        shooterHood = new BBDualServo(shooterHood1, shooterHood2);
        LiveWindow.addActuator("Shooter", "Hood", shooterHood);
        
        pickupWings = new BBSolenoid(0, 6);
        LiveWindow.addActuator("Pickup", "Wings", pickupWings);
        
        pickupPickup1 = new VictorSP(11);
        LiveWindow.addActuator("Pickup", "Pickup1", (VictorSP) pickupPickup1);
        
        pickupPickup2 = new VictorSP(7);
        LiveWindow.addActuator("Pickup", "Pickup2", (VictorSP) pickupPickup2);
        
        pickupPickup = new DualSpeedController(pickupPickup1, pickupPickup2, false, true);
        LiveWindow.addActuator("Pickup", "Pickup", pickupPickup);
        
        pickupLift = new BBSolenoid(0, 1);
        LiveWindow.addActuator("Pickup", "Lift", pickupLift);
        
        pickupGearSensor = new DigitalInput(5);
        LiveWindow.addSensor("Pickup", "GearSensor", pickupGearSensor);
        
        pickupHopper = new VictorSP(6);
        LiveWindow.addActuator("Pickup", "Hopper", (VictorSP) pickupHopper);
        
        pickupPincher = new BBDoubleSolenoid(0, 0, 5);
        LiveWindow.addActuator("Pickup", "Pincher", pickupPincher);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
    }
}
