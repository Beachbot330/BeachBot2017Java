// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.CANTalon;
import com.kauailabs.navx.frc.AHRS;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DigitalOutput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.SPI.Port;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.VictorSP;
import org.usfirst.frc330.wpilibj.BBDoubleSolenoid;
import org.usfirst.frc330.wpilibj.BBSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController chassisLeftDrive1;
    public static SpeedController chassisLeftDrive2;
    public static SpeedController chassisLeftDrive3;
    public static SpeedController chassisRightDrive1;
    public static SpeedController chassisRightDrive2;
    public static SpeedController chassisRightDrive3;
    public static Compressor chassisCompressor;
    public static Encoder chassisdriveTrainEncoderL;
    public static Encoder chassisdriveTrainEncoderR;
    public static BBDoubleSolenoid chassisShifter;
    public static AnalogInput chassispressureSensor;
    public static AHRS chassisimu;
    public static SpeedController shooterAgitator;
    public static CANTalon shooterShooter;
    public static BBSolenoid gearPincher;
    public static BBSolenoid gearLift;
    public static BBSolenoid gearEjector;
    public static SpeedController gearIntake;
    public static SpeedController pickupPickup1;
    public static SpeedController pickupPickup2;
    public static BBDoubleSolenoid pickupClimberBreak;
    public static BBSolenoid pickupIntake;
    public static DigitalOutput frillsBuzzer;
    public static DigitalInput frillspracticeRobot;
    public static PowerDistributionPanel frillsPowerDistPanel;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassisLeftDrive1 = new Talon(0);
        LiveWindow.addActuator("Chassis", "LeftDrive1", (Talon) chassisLeftDrive1);
        
        chassisLeftDrive2 = new Talon(1);
        LiveWindow.addActuator("Chassis", "LeftDrive2", (Talon) chassisLeftDrive2);
        
        chassisLeftDrive3 = new Talon(2);
        LiveWindow.addActuator("Chassis", "LeftDrive3", (Talon) chassisLeftDrive3);
        
        chassisRightDrive1 = new Talon(3);
        LiveWindow.addActuator("Chassis", "RightDrive1", (Talon) chassisRightDrive1);
        
        chassisRightDrive2 = new Talon(4);
        LiveWindow.addActuator("Chassis", "RightDrive2", (Talon) chassisRightDrive2);
        
        chassisRightDrive3 = new Talon(5);
        LiveWindow.addActuator("Chassis", "RightDrive3", (Talon) chassisRightDrive3);
        
        chassisCompressor = new Compressor(0);
        
        
        chassisdriveTrainEncoderL = new Encoder(1, 2, false, EncodingType.k4X);
        LiveWindow.addSensor("Chassis", "driveTrainEncoderL", chassisdriveTrainEncoderL);
        chassisdriveTrainEncoderL.setDistancePerPulse(1.0);
        chassisdriveTrainEncoderL.setPIDSourceType(PIDSourceType.kRate);
        chassisdriveTrainEncoderR = new Encoder(3, 4, false, EncodingType.k4X);
        LiveWindow.addSensor("Chassis", "driveTrainEncoderR", chassisdriveTrainEncoderR);
        chassisdriveTrainEncoderR.setDistancePerPulse(1.0);
        chassisdriveTrainEncoderR.setPIDSourceType(PIDSourceType.kRate);
        chassisShifter = new BBDoubleSolenoid(0, 3, 4);
        LiveWindow.addActuator("Chassis", "Shifter", chassisShifter);
        
        chassispressureSensor = new AnalogInput(0);
        LiveWindow.addSensor("Chassis", "pressureSensor", chassispressureSensor);
        
        chassisimu = new AHRS(Port.kMXP, (byte)50);
        LiveWindow.addSensor("Chassis", "imu", chassisimu);
        
        shooterAgitator = new VictorSP(8);
        LiveWindow.addActuator("Shooter", "Agitator", (VictorSP) shooterAgitator);
        
        shooterShooter = new CANTalon(1);
        LiveWindow.addActuator("Shooter", "Shooter", shooterShooter);
        
        gearPincher = new BBSolenoid(0, 0);
        LiveWindow.addActuator("Gear", "Pincher", gearPincher);
        
        gearLift = new BBSolenoid(0, 1);
        LiveWindow.addActuator("Gear", "Lift", gearLift);
        
        gearEjector = new BBSolenoid(0, 2);
        LiveWindow.addActuator("Gear", "Ejector", gearEjector);
        
        gearIntake = new VictorSP(11);
        LiveWindow.addActuator("Gear", "Intake", (VictorSP) gearIntake);
        
        pickupPickup1 = new VictorSP(6);
        LiveWindow.addActuator("Pickup", "Pickup1", (VictorSP) pickupPickup1);
        
        pickupPickup2 = new VictorSP(7);
        LiveWindow.addActuator("Pickup", "Pickup2", (VictorSP) pickupPickup2);
        
        pickupClimberBreak = new BBDoubleSolenoid(0, 5, 6);
        LiveWindow.addActuator("Pickup", "Climber Break", pickupClimberBreak);
        
        pickupIntake = new BBSolenoid(0, 7);
        LiveWindow.addActuator("Pickup", "Intake", pickupIntake);
        
        frillsBuzzer = new DigitalOutput(9);
        LiveWindow.addActuator("Frills", "Buzzer", frillsBuzzer);
        
        frillspracticeRobot = new DigitalInput(0);
        LiveWindow.addSensor("Frills", "practiceRobot", frillspracticeRobot);
        
        frillsPowerDistPanel = new PowerDistributionPanel(0);
        LiveWindow.addSensor("Frills", "PowerDistPanel", frillsPowerDistPanel);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
