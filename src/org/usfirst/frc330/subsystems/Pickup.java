// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.subsystems;

import org.usfirst.frc330.RobotMap;
import org.usfirst.frc330.commands.*;
import org.usfirst.frc330.constants.PickupConst;
import org.usfirst.frc330.util.CSVLoggable;
import org.usfirst.frc330.util.CSVLogger;
import org.usfirst.frc330.util.Logger;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;
import org.usfirst.frc330.wpilibj.BBDoubleSolenoid;
import org.usfirst.frc330.wpilibj.BBSolenoid;
import org.usfirst.frc330.wpilibj.DualSpeedController;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Pickup extends Subsystem {
	
	private boolean m_climbing = false;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final BBSolenoid wings = RobotMap.pickupWings;
    private final SpeedController pickup1 = RobotMap.pickupPickup1;
    private final SpeedController pickup2 = RobotMap.pickupPickup2;
    private final DualSpeedController pickup = RobotMap.pickupPickup;
    private final BBSolenoid lift = RobotMap.pickupLift;
    private final DigitalInput gearSensor = RobotMap.pickupGearSensor;
    private final SpeedController hopper = RobotMap.pickupHopper;
    private final BBDoubleSolenoid pincher = RobotMap.pickupPincher;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public Pickup() {
    	CSVLoggable temp = new CSVLoggable(true) {
			public double get() { return isGearPresent() ? 1 : 0; }
    	};
    	CSVLogger.getInstance().add("GearPresent", temp);
    }


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void pickupOff() {
    	pickup.set(0.0);
    	Logger.getInstance().println("Pickup Off");
    }
    
    public void pickupOn() {
    	pickup.set(PickupConst.PICKUP_SPEED);
    	Logger.getInstance().println("Pickup On");
    }
    
    public void pickupOn(double speed) {
    	pickup.set(speed);
    	Logger.getInstance().println("Pickup On");
    }
    
    public void pickupReverse() {
    	pickup.set(PickupConst.PICKUP_REVERSE_SPEED);
    	Logger.getInstance().println("Pickup Reverse");
    }
    
    public void wingsOpen() {
    	if(!getClimbing())
    		wings.set(true);
    	Logger.getInstance().println("Wings Open");
    }
    
    public void wingsClosed() {
    	if(!getClimbing())
    		wings.set(false);
    	Logger.getInstance().println("Wings Closed");
    }
    
    public void gearPickupDown() {
    	if(!getClimbing())
    		lift.set(true);
    	Logger.getInstance().println("Gear Pickup Down");
    }
    
    public void gearPickupUp() {
    	if(!getClimbing())
    		lift.set(false);
    	Logger.getInstance().println("Gear Pickup Up");
    }
    
    public void hopperAgitate() {
    	hopper.set(PickupConst.HOPPER_AGITATE_SPEED);
    	Logger.getInstance().println("Hopper Agitate");
    }
    
	public void hopperAgitateWhileShooting() {
		if(!getClimbing())
			hopper.set(PickupConst.HOPPER_AGITATE_SHOOT_SPEED);
	}
    
    public void hopperFeed() {
    	if(!getClimbing())
    		hopper.set(PickupConst.HOPPER_FEED_SPEED);
    }
    
    public void hopperSet(double speed) {
    	if(!getClimbing())
    		hopper.set(speed);
    }
    
    public void hopperStop(){
    	hopper.stopMotor();
    	Logger.getInstance().println("Hopper Stopped");
    }

	public void gearGrab() {
		pincher.set(DoubleSolenoid.Value.kReverse);;
		Logger.getInstance().println("Gear Grabbed");
	}

	public void gearRelease() {
		pincher.set(DoubleSolenoid.Value.kForward);
		Logger.getInstance().println("Gear Released");
		if (!isGearPresent())
			Logger.getInstance().println("No gear was present");
	}

	public boolean isGearPresent() {
		return  !gearSensor.get();
	}
	
	public void setClimbing(boolean climbing) {
		m_climbing = climbing;
	}
	
	public boolean getClimbing(){
		return m_climbing;
	}
	
}

